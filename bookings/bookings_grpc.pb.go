// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bookings

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BookingsApiClient is the client API for BookingsApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingsApiClient interface {
	GetAllProperties(ctx context.Context, in *Property, opts ...grpc.CallOption) (BookingsApi_GetAllPropertiesClient, error)
	BookPropertyById(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*UserPropertyBooking, error)
	GetBookingsByBooking(ctx context.Context, in *UserPropertyBooking, opts ...grpc.CallOption) (*UserPropertyBooking, error)
}

type bookingsApiClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingsApiClient(cc grpc.ClientConnInterface) BookingsApiClient {
	return &bookingsApiClient{cc}
}

func (c *bookingsApiClient) GetAllProperties(ctx context.Context, in *Property, opts ...grpc.CallOption) (BookingsApi_GetAllPropertiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BookingsApi_serviceDesc.Streams[0], "/api.BookingsApi/GetAllProperties", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookingsApiGetAllPropertiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BookingsApi_GetAllPropertiesClient interface {
	Recv() (*Property, error)
	grpc.ClientStream
}

type bookingsApiGetAllPropertiesClient struct {
	grpc.ClientStream
}

func (x *bookingsApiGetAllPropertiesClient) Recv() (*Property, error) {
	m := new(Property)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookingsApiClient) BookPropertyById(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*UserPropertyBooking, error) {
	out := new(UserPropertyBooking)
	err := c.cc.Invoke(ctx, "/api.BookingsApi/BookPropertyById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingsApiClient) GetBookingsByBooking(ctx context.Context, in *UserPropertyBooking, opts ...grpc.CallOption) (*UserPropertyBooking, error) {
	out := new(UserPropertyBooking)
	err := c.cc.Invoke(ctx, "/api.BookingsApi/GetBookingsByBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingsApiServer is the server API for BookingsApi service.
// All implementations must embed UnimplementedBookingsApiServer
// for forward compatibility
type BookingsApiServer interface {
	GetAllProperties(*Property, BookingsApi_GetAllPropertiesServer) error
	BookPropertyById(context.Context, *Booking) (*UserPropertyBooking, error)
	GetBookingsByBooking(context.Context, *UserPropertyBooking) (*UserPropertyBooking, error)
	mustEmbedUnimplementedBookingsApiServer()
}

// UnimplementedBookingsApiServer must be embedded to have forward compatible implementations.
type UnimplementedBookingsApiServer struct {
}

func (UnimplementedBookingsApiServer) GetAllProperties(*Property, BookingsApi_GetAllPropertiesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllProperties not implemented")
}
func (UnimplementedBookingsApiServer) BookPropertyById(context.Context, *Booking) (*UserPropertyBooking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookPropertyById not implemented")
}
func (UnimplementedBookingsApiServer) GetBookingsByBooking(context.Context, *UserPropertyBooking) (*UserPropertyBooking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingsByBooking not implemented")
}
func (UnimplementedBookingsApiServer) mustEmbedUnimplementedBookingsApiServer() {}

// UnsafeBookingsApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingsApiServer will
// result in compilation errors.
type UnsafeBookingsApiServer interface {
	mustEmbedUnimplementedBookingsApiServer()
}

func RegisterBookingsApiServer(s grpc.ServiceRegistrar, srv BookingsApiServer) {
	s.RegisterService(&_BookingsApi_serviceDesc, srv)
}

func _BookingsApi_GetAllProperties_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Property)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookingsApiServer).GetAllProperties(m, &bookingsApiGetAllPropertiesServer{stream})
}

type BookingsApi_GetAllPropertiesServer interface {
	Send(*Property) error
	grpc.ServerStream
}

type bookingsApiGetAllPropertiesServer struct {
	grpc.ServerStream
}

func (x *bookingsApiGetAllPropertiesServer) Send(m *Property) error {
	return x.ServerStream.SendMsg(m)
}

func _BookingsApi_BookPropertyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Booking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingsApiServer).BookPropertyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BookingsApi/BookPropertyById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingsApiServer).BookPropertyById(ctx, req.(*Booking))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingsApi_GetBookingsByBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPropertyBooking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingsApiServer).GetBookingsByBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BookingsApi/GetBookingsByBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingsApiServer).GetBookingsByBooking(ctx, req.(*UserPropertyBooking))
	}
	return interceptor(ctx, in, info, handler)
}

var _BookingsApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.BookingsApi",
	HandlerType: (*BookingsApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BookPropertyById",
			Handler:    _BookingsApi_BookPropertyById_Handler,
		},
		{
			MethodName: "GetBookingsByBooking",
			Handler:    _BookingsApi_GetBookingsByBooking_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllProperties",
			Handler:       _BookingsApi_GetAllProperties_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bookings.proto",
}
